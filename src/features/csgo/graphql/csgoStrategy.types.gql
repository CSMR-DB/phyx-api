type StrategyItem {
  internal_id: String!
}

type Loadout {
  cost: Int!
  primary: StrategyItem
  secondary: StrategyItem!
  gear: [StrategyItem]
  utilities: [StrategyItem]
}

type Position {
  x: Int!
  y: Int!
}

type Player {
  internal_id: ID!
  color: String!
  name: String!
  role: String
  loadout: Loadout!
  positions: [Position!]!
}

type Players {
  player_1: Player!
  player_2: Player!
  player_3: Player!
  player_4: Player!
  player_5: Player!
}

type Team {
  team_id: ID
  name: String
  players: Players!
}

type CSGOStrategy {
  _id: ID!
  name: String!
  map: String!
  description: String
  side: String!
  team: Team!
  budget: Int
  createdAt: String!
  updatedAt: String!
}

type Query {
  csgoStrategies: [CSGOStrategy!]!
  csgoStrategiesByMap(map: String): [CSGOStrategy!]!
  csgoStrategy(id: String): CSGOStrategy!
}

# ValidationReturnType
type ValidationReturn {
  result: Boolean
  errors: [String]
  _id: String
}

# Define input model for submission
input StrategyItemInput {
  internal_id: String
}

input LoadoutInput {
  primary: StrategyItemInput
  secondary: StrategyItemInput
  gear: [StrategyItemInput]
  utilities: [StrategyItemInput]
}

input PositionInput {
  x: Int
  y: Int
}

input PlayerInput {
  color: String
  name: String
  role: String
  loadout: LoadoutInput!
  positions: [PositionInput]
}

input PlayersInput {
  player_1: PlayerInput
  player_2: PlayerInput
  player_3: PlayerInput
  player_4: PlayerInput
  player_5: PlayerInput
}

input TeamInput {
  name: String
  players: PlayersInput
}

input CSGOStrategyInput {
  name: String!
  side: String!
  description: String
  map: String!
  team: TeamInput
  budget: Int!
}

type Mutation {
  createCSGOStrategy(strategy: CSGOStrategyInput): ValidationReturn
}
