enum StrategySide {
  ATK
  DEF
}

type CSGOStrategyItem {
  _id: String!
  name: String
  cost: Int
  slot: String
}

type CSGOLoadout {
  cost: Int!
  primary: CSGOStrategyItem
  secondary: CSGOStrategyItem!
  gear: [CSGOStrategyItem]
  utilities: [CSGOStrategyItem]
}

type Position {
  x: Int!
  y: Int!
}

type Player {
  internal_id: ID
  color: String!
  name: String!
  role: String
  loadout: CSGOLoadout!
  positions: [Position!]!
}

type Team {
  team_id: ID
  name: String
  players: [Player!]!
}

type CSGOStrategy {
  _id: ID!
  name: String!
  map: String!
  description: String
  side: StrategySide!
  team: Team!
  budget: Int
  createdAt: String!
  updatedAt: String!
}

type Query {
  csgoStrategies: [CSGOStrategy]
  csgoStrategiesByMap(map: String): [CSGOStrategy]
  csgoStrategy(id: String): CSGOStrategy
}

# Define input model for submission
input LoadoutInput {
  primary: String
  secondary: String
  gear: [String]
  utilities: [String]
}

input PositionInput {
  x: Int
  y: Int
}

input PlayerInput {
  color: String
  name: String
  role: String
  loadout: LoadoutInput!
  positions: [PositionInput]
}

input TeamInput {
  name: String
  players: [PlayerInput]
}

input CSGOStrategyInput {
  name: String!
  side: StrategySide!
  description: String
  map: String!
  team: TeamInput
  budget: Int!
}

type Mutation {
  createCSGOStrategy(strategy: CSGOStrategyInput): MutationReturn
  createCSGOStrategies(strategies: [CSGOStrategyInput]): [MutationReturn]
  updateCSGOStrategy(id: String, strategy: CSGOStrategyInput): MutationReturn
  deleteCSGOStrategy(id: String): MutationReturn
  deleteCSGOStrategies(ids: [String]): MutationReturn
}
